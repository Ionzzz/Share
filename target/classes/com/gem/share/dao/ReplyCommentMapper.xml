<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gem.share.dao.ReplyCommentMapper">
  <resultMap id="BaseResultMap" type="com.gem.share.entity.ReplyComment">
    <id column="replyComment_id" jdbcType="INTEGER" property="replycommentId" />
    <result column="comment_id" jdbcType="INTEGER" property="commentId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="replyCommentContent" jdbcType="VARCHAR" property="replycommentcontent" />
    <result column="replyCommentTime" jdbcType="TIMESTAMP" property="replycommenttime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    replyComment_id, comment_id, user_id, replyCommentContent, replyCommentTime
  </sql>
  <select id="selectByExample" parameterType="com.gem.share.entity.ReplyCommentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from replycomment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from replycomment
    where replyComment_id = #{replycommentId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from replycomment
    where replyComment_id = #{replycommentId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.gem.share.entity.ReplyCommentExample">
    delete from replycomment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.gem.share.entity.ReplyComment">
    insert into replycomment (replyComment_id, comment_id, user_id, 
      replyCommentContent, replyCommentTime
      )
    values (#{replycommentId,jdbcType=INTEGER}, #{commentId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{replycommentcontent,jdbcType=VARCHAR}, #{replycommenttime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.gem.share.entity.ReplyComment">
    insert into replycomment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="replycommentId != null">
        replyComment_id,
      </if>
      <if test="commentId != null">
        comment_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="replycommentcontent != null">
        replyCommentContent,
      </if>
      <if test="replycommenttime != null">
        replyCommentTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="replycommentId != null">
        #{replycommentId,jdbcType=INTEGER},
      </if>
      <if test="commentId != null">
        #{commentId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="replycommentcontent != null">
        #{replycommentcontent,jdbcType=VARCHAR},
      </if>
      <if test="replycommenttime != null">
        #{replycommenttime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.gem.share.entity.ReplyCommentExample" resultType="java.lang.Long">
    select count(*) from replycomment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update replycomment
    <set>
      <if test="record.replycommentId != null">
        replyComment_id = #{record.replycommentId,jdbcType=INTEGER},
      </if>
      <if test="record.commentId != null">
        comment_id = #{record.commentId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.replycommentcontent != null">
        replyCommentContent = #{record.replycommentcontent,jdbcType=VARCHAR},
      </if>
      <if test="record.replycommenttime != null">
        replyCommentTime = #{record.replycommenttime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update replycomment
    set replyComment_id = #{record.replycommentId,jdbcType=INTEGER},
      comment_id = #{record.commentId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      replyCommentContent = #{record.replycommentcontent,jdbcType=VARCHAR},
      replyCommentTime = #{record.replycommenttime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.gem.share.entity.ReplyComment">
    update replycomment
    <set>
      <if test="commentId != null">
        comment_id = #{commentId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="replycommentcontent != null">
        replyCommentContent = #{replycommentcontent,jdbcType=VARCHAR},
      </if>
      <if test="replycommenttime != null">
        replyCommentTime = #{replycommenttime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where replyComment_id = #{replycommentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.gem.share.entity.ReplyComment">
    update replycomment
    set comment_id = #{commentId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      replyCommentContent = #{replycommentcontent,jdbcType=VARCHAR},
      replyCommentTime = #{replycommenttime,jdbcType=TIMESTAMP}
    where replyComment_id = #{replycommentId,jdbcType=INTEGER}
  </update>

  <!--//    通过评论id找用户id-->
  <!--public Integer selectCommentUserIdByCommentId(int comment_id);-->
  <select id="selectCommentUserIdByCommentId" parameterType="int" resultType="Integer">
    SELECT user_id from replycomment where comment_id =#{_parameter}
  </select>

  <!--//    通过评论id找评论内容-->
  <!--public String selectCommentContentByCommentId(int comment_id);-->
  <select id="selectCommentContentByCommentId" parameterType="int" resultType="String">
    SELECT replycommentContent FROM replycomment WHERE comment_id =#{_parameter}
  </select>

  <!--//    通过评论id找评论时间-->
  <!--public Date selectCommentTimeByCommentId(int comment_id);-->
  <select id="selectCommentTimeByCommentId" parameterType="int" resultType="Date">
    SELECT replyCommentTime FROM replycomment where comment_id =#{_parameter}
  </select>



</mapper>