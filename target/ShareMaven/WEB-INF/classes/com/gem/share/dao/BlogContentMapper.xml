<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gem.share.dao.BlogContentMapper">
  
  
  <resultMap id="BaseResultMap" type="BlogContent">
    <id column="blog_id" jdbcType="INTEGER" property="blogId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="blogPics_id" jdbcType="INTEGER" property="blogpicsId" />
    <result column="blogCreateTime" jdbcType="TIMESTAMP" property="blogcreatetime" />
    <result column="blogFlag" jdbcType="VARCHAR" property="blogflag" />
    <result column="essayFlag" jdbcType="VARCHAR" property="essayflag" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.gem.share.entity.BlogContent">
    <result column="blogContent" jdbcType="LONGVARCHAR" property="blogcontent" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    blog_id, user_id, blogPics_id, blogCreateTime, blogFlag, essayFlag
  </sql>
  <sql id="Blob_Column_List">
    blogContent
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="BlogContentExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blogcontent
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.gem.share.entity.BlogContentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from blogcontent
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blogcontent
    where blog_id = #{blogId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from blogcontent
    where blog_id = #{blogId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.gem.share.entity.BlogContentExample">
    delete from blogcontent
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.gem.share.entity.BlogContent">
    insert into blogcontent (blog_id, user_id, blogPics_id, 
      blogCreateTime, blogFlag, essayFlag, 
      blogContent)
    values (#{blogId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{blogpicsId,jdbcType=INTEGER}, 
      #{blogcreatetime,jdbcType=TIMESTAMP}, #{blogflag,jdbcType=VARCHAR}, #{essayflag,jdbcType=VARCHAR}, 
      #{blogcontent,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.gem.share.entity.BlogContent">
    insert into blogcontent
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="blogId != null">
        blog_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="blogpicsId != null">
        blogPics_id,
      </if>
      <if test="blogcreatetime != null">
        blogCreateTime,
      </if>
      <if test="blogflag != null">
        blogFlag,
      </if>
      <if test="essayflag != null">
        essayFlag,
      </if>
      <if test="blogcontent != null">
        blogContent,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="blogId != null">
        #{blogId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="blogpicsId != null">
        #{blogpicsId,jdbcType=INTEGER},
      </if>
      <if test="blogcreatetime != null">
        #{blogcreatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="blogflag != null">
        #{blogflag,jdbcType=VARCHAR},
      </if>
      <if test="essayflag != null">
        #{essayflag,jdbcType=VARCHAR},
      </if>
      <if test="blogcontent != null">
        #{blogcontent,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.gem.share.entity.BlogContentExample" resultType="java.lang.Long">
    select count(*) from blogcontent
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update blogcontent
    <set>
      <if test="record.blogId != null">
        blog_id = #{record.blogId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.blogpicsId != null">
        blogPics_id = #{record.blogpicsId,jdbcType=INTEGER},
      </if>
      <if test="record.blogcreatetime != null">
        blogCreateTime = #{record.blogcreatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.blogflag != null">
        blogFlag = #{record.blogflag,jdbcType=VARCHAR},
      </if>
      <if test="record.essayflag != null">
        essayFlag = #{record.essayflag,jdbcType=VARCHAR},
      </if>
      <if test="record.blogcontent != null">
        blogContent = #{record.blogcontent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update blogcontent
    set blog_id = #{record.blogId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      blogPics_id = #{record.blogpicsId,jdbcType=INTEGER},
      blogCreateTime = #{record.blogcreatetime,jdbcType=TIMESTAMP},
      blogFlag = #{record.blogflag,jdbcType=VARCHAR},
      essayFlag = #{record.essayflag,jdbcType=VARCHAR},
      blogContent = #{record.blogcontent,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update blogcontent
    set blog_id = #{record.blogId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      blogPics_id = #{record.blogpicsId,jdbcType=INTEGER},
      blogCreateTime = #{record.blogcreatetime,jdbcType=TIMESTAMP},
      blogFlag = #{record.blogflag,jdbcType=VARCHAR},
      essayFlag = #{record.essayflag,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.gem.share.entity.BlogContent">
    update blogcontent
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="blogpicsId != null">
        blogPics_id = #{blogpicsId,jdbcType=INTEGER},
      </if>
      <if test="blogcreatetime != null">
        blogCreateTime = #{blogcreatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="blogflag != null">
        blogFlag = #{blogflag,jdbcType=VARCHAR},
      </if>
      <if test="essayflag != null">
        essayFlag = #{essayflag,jdbcType=VARCHAR},
      </if>
      <if test="blogcontent != null">
        blogContent = #{blogcontent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where blog_id = #{blogId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.gem.share.entity.BlogContent">
    update blogcontent
    set user_id = #{userId,jdbcType=INTEGER},
      blogPics_id = #{blogpicsId,jdbcType=INTEGER},
      blogCreateTime = #{blogcreatetime,jdbcType=TIMESTAMP},
      blogFlag = #{blogflag,jdbcType=VARCHAR},
      essayFlag = #{essayflag,jdbcType=VARCHAR},
      blogContent = #{blogcontent,jdbcType=LONGVARCHAR}
    where blog_id = #{blogId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.gem.share.entity.BlogContent">
    update blogcontent
    set user_id = #{userId,jdbcType=INTEGER},
      blogPics_id = #{blogpicsId,jdbcType=INTEGER},
      blogCreateTime = #{blogcreatetime,jdbcType=TIMESTAMP},
      blogFlag = #{blogflag,jdbcType=VARCHAR},
      essayFlag = #{essayflag,jdbcType=VARCHAR}
    where blog_id = #{blogId,jdbcType=INTEGER}
  </update>

  <!--//  按照博客发表时间排序 若时间相同按照用户id升序排列-->
  <!--public List<BlogContent> orderBlogByCreateTime();-->
  <select id="orderBlogByCreateTime" resultType="BlogContent">
      SELECT * FROM blogcontent ORDER BY blogCreateTime DESC,user_id ASC
  </select>

  <!--public BlogContent selectBlogByBlogId(int blog_id);-->
  <select id="selectBlogByBlogId" parameterType="int" resultType="BlogContent">
    select * from blogcontent where blog_id=#{_parameter}
  </select>

  <!--public List<BlogContent> selectAllBlog();-->
  <select id="selectAllBlog" resultMap="selectAllBlogMap">
    select * from blogcontent
  </select>
  <resultMap id="selectAllBlogMap" type="BlogContent">
    <id column="blog_id" property="blogId"/>
    <result column="user_id" property="userId"/>
    <result column="blogPics_id" property="blogpicsId"/>
    <result column="blogCreateTime" property="blogcreatetime"/>
    <result column="blogFlag" property="blogflag"/>
    <result column="essayFlag" property="essayflag"/>
    <result column="blogContent" property="blogcontent"/>
  </resultMap>

  <!--public boolean updateBlogByBlogId(BlogContent blogContent);-->
  <update id="updateBlogByBlogId" parameterType="BlogContent" >
    update blogcontent set blogContent=#{blogcontent},blogPics_id=#{blogpicsId}
          where blog_id=#{blogId}
  </update>
  <!--public boolean insertBlog(BlogContent blogContent);-->
  <insert id="insertBlog" parameterType="BlogContent" useGeneratedKeys="true" keyProperty="blog_id">
    insert into blogcontent values(#{blog_id},#{user_id},#{blogContent},#{blogPics_id},#{blogCreateTime},#{blogFlag},#{essayFlag})
  </insert>
  <!--public boolean deleteBlogByBlogId(int blog_id);-->
  <delete id="deleteBlogByBlogId" parameterType="int">
    delete from blogcontent where blog_id=#{_parameter}
  </delete>

  <!--public Date selectBlogCreateTimeByBlogId(int blog_id);-->
  <select id="selectBlogCreateTimeByBlogId" parameterType="int" resultType="Date">
    select createtime from blogcentent where blog_id=#{_parameter};
  </select>

  <!--public List<BlogUserPicsLabel> selectBlogCountOrderZan(int count);-->
  <select id="selectBlogCountOrderZan" resultMap="selectBlogUserLabelMap" parameterType="int">
  select blogcontent.*,userinfo.*,blogpics.*,bloglabel.*,labelinfo.*,
  case when a.zan is null then 0 else a.zan end as zan,
  case when b.pinglun is null then 0 else b.pinglun end as pinglun,
  case when c.liulan is null then 0 else c.liulan end as liulan
  from blogcontent
  left join userinfo ON blogcontent.user_id=userinfo.user_id
  left join blogpics ON blogcontent.blogPics_id=blogpics.blogPics_id
  left join bloglabel ON blogcontent.blog_id=bloglabel.blog_id
  left join labelinfo ON bloglabel.label_id=labelinfo.label_id
  left join (select blog_id,count(blog_id) as zan from blogzan group by blog_id) a on (a.blog_id=blogcontent.blog_id)
  left join (select blog_id,count(blog_id) as pinglun from blogcomment group by blog_id) b on (b.blog_id=blogcontent.blog_id)
  left join	(select blog_id,blogBrowseCount as liulan from blogbrowse group by blog_id) c on (c.blog_id=blogcontent.blog_id)
  order by zan desc
    limit #{_parameter}
  </select>
  <!--public List<BlogUserPicsLabel> selectBlogCountOrderLiulan(int count);-->
  <select id="selectBlogCountOrderLiulan" resultMap="selectBlogUserLabelMap" parameterType="int">
    select blogcontent.*,userinfo.*,blogpics.*,bloglabel.*,labelinfo.*,
    case when a.zan is null then 0 else a.zan end as zan,
    case when b.pinglun is null then 0 else b.pinglun end as pinglun,
    case when c.liulan is null then 0 else c.liulan end as liulan
    from blogcontent
    left join userinfo ON blogcontent.user_id=userinfo.user_id
    left join blogpics ON blogcontent.blogPics_id=blogpics.blogPics_id
    left join bloglabel ON blogcontent.blog_id=bloglabel.blog_id
    left join labelinfo ON bloglabel.label_id=labelinfo.label_id
    left join (select blog_id,count(blog_id) as zan from blogzan group by blog_id) a on (a.blog_id=blogcontent.blog_id)
    left join (select blog_id,count(blog_id) as pinglun from blogcomment group by blog_id) b on (b.blog_id=blogcontent.blog_id)
    left join	(select blog_id,blogBrowseCount as liulan from blogbrowse group by blog_id) c on (c.blog_id=blogcontent.blog_id)
    order by liulan desc
    limit #{_parameter}
  </select>
  <!--public List<BlogUserPicsLabel> selectBlogCountOrderPinglun(int count);-->
  <select id="selectBlogCountOrderPinglun" resultMap="selectBlogUserLabelMap" parameterType="int">
    select blogcontent.*,userinfo.*,blogpics.*,bloglabel.*,labelinfo.*,
    case when a.zan is null then 0 else a.zan end as zan,
    case when b.pinglun is null then 0 else b.pinglun end as pinglun,
    case when c.liulan is null then 0 else c.liulan end as liulan
    from blogcontent
    left join userinfo ON blogcontent.user_id=userinfo.user_id
    left join blogpics ON blogcontent.blogPics_id=blogpics.blogPics_id
    left join bloglabel ON blogcontent.blog_id=bloglabel.blog_id
    left join labelinfo ON bloglabel.label_id=labelinfo.label_id
    left join (select blog_id,count(blog_id) as zan from blogzan group by blog_id) a on (a.blog_id=blogcontent.blog_id)
    left join (select blog_id,count(blog_id) as pinglun from blogcomment group by blog_id) b on (b.blog_id=blogcontent.blog_id)
    left join	(select blog_id,blogBrowseCount as liulan from blogbrowse group by blog_id) c on (c.blog_id=blogcontent.blog_id)
    order by pinglun desc
    limit #{_parameter}
  </select>
  <!--public List<BlogUserPicsLabel> selectOrderBlogUserPics(String searchContent);-->
  <select id="selectOrderBlogUserPics" resultMap="selectBlogUserLabelMap" parameterType="String">
  select blogcontent.*,userinfo.*,blogpics.*,bloglabel.*,labelinfo.*,
  case when a.zan is null then 0 else a.zan end as zan,
  case when b.pinglun is null then 0 else b.pinglun end as pinglun,
  case when c.liulan is null then 0 else c.liulan end as liulan
  from blogcontent
  left join userinfo ON blogcontent.user_id=userinfo.user_id
  left join blogpics ON blogcontent.blogPics_id=blogpics.blogPics_id
  left join bloglabel ON blogcontent.blog_id=bloglabel.blog_id
  left join labelinfo ON bloglabel.label_id=labelinfo.label_id
  left join (select blog_id,count(blog_id) as zan from blogzan group by blog_id) a on (a.blog_id=blogcontent.blog_id)
  left join (select blog_id,count(blog_id) as pinglun from blogcomment group by blog_id) b on (b.blog_id=blogcontent.blog_id)
  left join	(select blog_id,blogBrowseCount as liulan from blogbrowse group by blog_id) c on (c.blog_id=blogcontent.blog_id)
  where blogcontent.blogFlag=0
  and blogcontent.blogContent like '%${_parameter}%'
    order by blogcontent.blogCreateTime desc
  </select>

  <resultMap id="selectBlogUserLabelMap" type="BlogUserPicsLabel">
    <result column="zan" property="zan"/>
    <result column="pinglun" property="pinglun"/>
    <result column="liulan" property="liulan"/>

    <association property="blogContent" javaType="BlogContent">
      <id column="blog_id" property="blogId"/>
      <result column="user_id" property="userId"/>
      <result column="blogPics_id" property="blogpicsId"/>
      <result column="blogCreateTime" property="blogcreatetime"/>
      <result column="blogFlag" property="blogflag"/>
      <result column="essayFlag" property="essayflag"/>
      <result column="blogContent" property="blogcontent"/>
    </association>
    <association property="userInfo" javaType="UserInfo">
      <id column="user_id" property="userId"/>
      <result column="userAccount" property="useraccount"/>
      <result column="userPwd" property="userpwd"/>
      <result column="userSex" property="usersex"/>
      <result column="userAge" property="userage"/>
      <result column="userEducate" property="usereducate"/>
      <result column="userGraduate" property="usergraduate"/>
      <result column="userIntroduce" property="userintroduce"/>
      <result column="userNickName" property="usernickname"/>
      <result column="userImg" property="userimg"/>
      <result column="userEmail" property="useremail"/>
      <result column="addresss_id" property="addresssId"/>
      <result column="userPhone" property="userphone"/>
      <result column="userEnergy" property="userenergy"/>
      <result column="username" property="username"/>
      <result column="userIdNumber" property="useridnumber"/>
      <result column="userStatus" property="userstatus"/>
      <result column="userCreateTime" property="usercreatetime"/>
      <result column="logintime" property="logintime"/>
    </association>
    <association property="blogPics" javaType="BlogPics">
      <id column="blogPics_id" property="blogpicsId"/>
      <result column="blog_id" property="blogId"/>
      <result column="pic" property="pic"/>
    </association>
    <association property="blogLabel" javaType="BlogLabel">
      <id column="blogLabel_id" property="bloglabelId"/>
      <result column="blog_id" property="blogId"/>
      <result column="label_id" property="labelId"/>
    </association>
    <association property="labelInfo" javaType="LabelInfo">
      <id column="label_id" property="labelId"/>
      <result column="labelName" property="labelname"/>
      <result column="labelContent" property="labelcontent"/>
      <result column="labelCreateTime" property="labelcreatetime"/>
      <result column="labelModifyTime" property="labelmodifytime"/>
    </association>

  </resultMap>
  <!--public List<BlogUserPicsLabel> selectAllBlogUserLabel();-->
<select id="selectAllBlogUserLabel" resultMap="selectBlogUserLabelMap">
   select blogcontent.*,userinfo.*,blogpics.*,bloglabel.*,labelinfo.*,
    case when a.zan is null then 0 else a.zan end as zan,
    case when b.pinglun is null then 0 else b.pinglun end as pinglun,
    case when c.liulan is null then 0 else c.liulan end as liulan
    from blogcontent
    left join userinfo ON blogcontent.user_id=userinfo.user_id
    left join blogpics ON blogcontent.blogPics_id=blogpics.blogPics_id
    left join bloglabel ON blogcontent.blog_id=bloglabel.blog_id
    left join labelinfo ON bloglabel.label_id=labelinfo.label_id
    left join (select blog_id,count(blog_id) as zan from blogzan group by blog_id) a on (a.blog_id=blogcontent.blog_id)
    left join (select blog_id,count(blog_id) as pinglun from blogcomment group by blog_id) b on (b.blog_id=blogcontent.blog_id)
    left join (select blog_id,blogBrowseCount as liulan from blogbrowse group by blog_id) c on (c.blog_id=blogcontent.blog_id)

</select>
  <!--    public List<BlogUserPicsLabel> selectBlogUserPicsCountByLabelId(int label_id);-->
  <select id="selectBlogUserPicsCountByLabelId" resultMap="selectBlogUserLabelMap" parameterType="int">
    select blogcontent.*,userinfo.*,blogpics.*,bloglabel.*,labelinfo.*,
    case when a.zan is null then 0 else a.zan end as zan,
    case when b.pinglun is null then 0 else b.pinglun end as pinglun,
    case when c.liulan is null then 0 else c.liulan end as liulan
    from blogcontent
    left join userinfo ON blogcontent.user_id=userinfo.user_id
    left join blogpics ON blogcontent.blogPics_id=blogpics.blogPics_id
    left join bloglabel ON blogcontent.blog_id=bloglabel.blog_id
    left join labelinfo ON bloglabel.label_id=labelinfo.label_id
    left join (select blog_id,count(blog_id) as zan from blogzan group by blog_id) a on (a.blog_id=blogcontent.blog_id)
    left join (select blog_id,count(blog_id) as pinglun from blogcomment group by blog_id) b on (b.blog_id=blogcontent.blog_id)
    left join (select blog_id,blogBrowseCount as liulan from blogbrowse group by blog_id) c on (c.blog_id=blogcontent.blog_id)

    where labelinfo.label_id=#{_parameter}
  </select>
  <!--public BlogUserPicsLabel selectBlogUserPicsByBlogId(int blog_id);-->
  <select id="selectBlogUserPicsByBlogId" resultMap="selectBlogUserLabelMap" parameterType="int">
    select blogcontent.*,userinfo.*,blogpics.*,bloglabel.*,labelinfo.*,
    case when a.zan is null then 0 else a.zan end as zan,
    case when b.pinglun is null then 0 else b.pinglun end as pinglun,
    case when c.liulan is null then 0 else c.liulan end as liulan
    from blogcontent
    left join userinfo ON blogcontent.user_id=userinfo.user_id
    left join blogpics ON blogcontent.blogPics_id=blogpics.blogPics_id
    left join bloglabel ON blogcontent.blog_id=bloglabel.blog_id
    left join labelinfo ON bloglabel.label_id=labelinfo.label_id
    left join (select blog_id,count(blog_id) as zan from blogzan group by blog_id) a on (a.blog_id=blogcontent.blog_id)
    left join (select blog_id,count(blog_id) as pinglun from blogcomment group by blog_id) b on (b.blog_id=blogcontent.blog_id)
    left join (select blog_id,blogBrowseCount as liulan from blogbrowse group by blog_id) c on (c.blog_id=blogcontent.blog_id)

    where blogcontent.blog_id=#{_parameter}
  </select>
  <!--public BlogUserPicsLabel selectOneBlogOrderBlogBrowse();-->
  <select id="selectOneBlogOrderBlogBrowse" resultMap="selectBlogUserLabelMap">
    select blogcontent.*,userinfo.*,blogpics.*,bloglabel.*,labelinfo.*,
    case when a.zan is null then 0 else a.zan end as zan,
    case when b.pinglun is null then 0 else b.pinglun end as pinglun,
    case when c.liulan is null then 0 else c.liulan end as liulan
    from blogcontent
    left join userinfo ON blogcontent.user_id=userinfo.user_id
    left join blogpics ON blogcontent.blogPics_id=blogpics.blogPics_id
    left join bloglabel ON blogcontent.blog_id=bloglabel.blog_id
    left join labelinfo ON bloglabel.label_id=labelinfo.label_id
    left join (select blog_id,count(blog_id) as zan from blogzan group by blog_id) a on (a.blog_id=blogcontent.blog_id)
    left join (select blog_id,count(blog_id) as pinglun from blogcomment group by blog_id) b on (b.blog_id=blogcontent.blog_id)
    left join (select blog_id,blogBrowseCount as liulan from blogbrowse group by blog_id) c on (c.blog_id=blogcontent.blog_id)
    order by liulan desc
    limit 1

  </select>
  <!--public boolean updateBlogBrowse(int blog_id);-->
  <update id="updateBlogBrowse" parameterType="int">
    update blogbrowse set blogBrowseCount=blogBrowseCount+1 where blog_id=#{_parameter}
  </update>

  <!--public List<BlogUserPicsLabel> selectBlogUserPicsLabelByLabelNameOrderZan(String labelName);-->
  <select id="selectBlogUserPicsLabelByLabelNameOrderZan" resultMap="selectBlogUserLabelMap" parameterType="String">
    select blogcontent.*,userinfo.*,blogpics.*,bloglabel.*,labelinfo.*,
    case when a.zan is null then 0 else a.zan end as zan,
    case when b.pinglun is null then 0 else b.pinglun end as pinglun,
    case when c.liulan is null then 0 else c.liulan end as liulan
    from blogcontent
    left join userinfo ON blogcontent.user_id=userinfo.user_id
    left join blogpics ON blogcontent.blogPics_id=blogpics.blogPics_id
    left join bloglabel ON blogcontent.blog_id=bloglabel.blog_id
    left join labelinfo ON bloglabel.label_id=labelinfo.label_id
    left join (select blog_id,count(blog_id) as zan from blogzan group by blog_id) a on (a.blog_id=blogcontent.blog_id)
    left join (select blog_id,count(blog_id) as pinglun from blogcomment group by blog_id) b on (b.blog_id=blogcontent.blog_id)
    left join (select blog_id,blogBrowseCount as liulan from blogbrowse group by blog_id) c on (c.blog_id=blogcontent.blog_id)

    where labelinfo.labelname='${_parameter}'
    order by zan desc
  </select>
  <!--public List<BlogUserPicsLabel> selectBlogUserPicsLabelByLabelNameOrderPingLun(String labelName);-->
  <select id="selectBlogUserPicsLabelByLabelNameOrderPingLun" resultMap="selectBlogUserLabelMap" parameterType="String">
    select blogcontent.*,userinfo.*,blogpics.*,bloglabel.*,labelinfo.*,
    case when a.zan is null then 0 else a.zan end as zan,
    case when b.pinglun is null then 0 else b.pinglun end as pinglun,
    case when c.liulan is null then 0 else c.liulan end as liulan
    from blogcontent
    left join userinfo ON blogcontent.user_id=userinfo.user_id
    left join blogpics ON blogcontent.blogPics_id=blogpics.blogPics_id
    left join bloglabel ON blogcontent.blog_id=bloglabel.blog_id
    left join labelinfo ON bloglabel.label_id=labelinfo.label_id
    left join (select blog_id,count(blog_id) as zan from blogzan group by blog_id) a on (a.blog_id=blogcontent.blog_id)
    left join (select blog_id,count(blog_id) as pinglun from blogcomment group by blog_id) b on (b.blog_id=blogcontent.blog_id)
    left join (select blog_id,blogBrowseCount as liulan from blogbrowse group by blog_id) c on (c.blog_id=blogcontent.blog_id)

    where labelinfo.labelname='${_parameter}'
    order by pinglun desc
  </select>
  <!--public List<BlogUserPicsLabel> selectBlogUserPicsLabelByLabelNameOrderLiuLan(String labelName);-->
  <select id="selectBlogUserPicsLabelByLabelNameOrderLiuLan" resultMap="selectBlogUserLabelMap" parameterType="String">
    select blogcontent.*,userinfo.*,blogpics.*,bloglabel.*,labelinfo.*,
    case when a.zan is null then 0 else a.zan end as zan,
    case when b.pinglun is null then 0 else b.pinglun end as pinglun,
    case when c.liulan is null then 0 else c.liulan end as liulan
    from blogcontent
    left join userinfo ON blogcontent.user_id=userinfo.user_id
    left join blogpics ON blogcontent.blogPics_id=blogpics.blogPics_id
    left join bloglabel ON blogcontent.blog_id=bloglabel.blog_id
    left join labelinfo ON bloglabel.label_id=labelinfo.label_id
    left join (select blog_id,count(blog_id) as zan from blogzan group by blog_id) a on (a.blog_id=blogcontent.blog_id)
    left join (select blog_id,count(blog_id) as pinglun from blogcomment group by blog_id) b on (b.blog_id=blogcontent.blog_id)
    left join (select blog_id,blogBrowseCount as liulan from blogbrowse group by blog_id) c on (c.blog_id=blogcontent.blog_id)

    where labelinfo.labelname='${_parameter}'
    order by liulan desc
  </select>
  <!--public List<BlogUserPicsLabel> selectBlogUserPicsLabelByLabelNameOrderTime(String labelName);-->
  <select id="selectBlogUserPicsLabelByLabelNameOrderTime" resultMap="selectBlogUserLabelMap" parameterType="String">
    select blogcontent.*,userinfo.*,blogpics.*,bloglabel.*,labelinfo.*,
    case when a.zan is null then 0 else a.zan end as zan,
    case when b.pinglun is null then 0 else b.pinglun end as pinglun,
    case when c.liulan is null then 0 else c.liulan end as liulan
    from blogcontent
    left join userinfo ON blogcontent.user_id=userinfo.user_id
    left join blogpics ON blogcontent.blogPics_id=blogpics.blogPics_id
    left join bloglabel ON blogcontent.blog_id=bloglabel.blog_id
    left join labelinfo ON bloglabel.label_id=labelinfo.label_id
    left join (select blog_id,count(blog_id) as zan from blogzan group by blog_id) a on (a.blog_id=blogcontent.blog_id)
    left join (select blog_id,count(blog_id) as pinglun from blogcomment group by blog_id) b on (b.blog_id=blogcontent.blog_id)
    left join (select blog_id,blogBrowseCount as liulan from blogbrowse group by blog_id) c on (c.blog_id=blogcontent.blog_id)

    where labelinfo.labelname='${_parameter}'
    order by blogcontent.blogcreatetime desc
  </select>
  <!--//    删除用户点赞记录-->
  <!--public boolean deleteZanRecordByZanId(int zan_id);-->
  <delete id="deleteZanRecordByZanId" parameterType="int">
    delete from blogzan WHERE blogZan_id = #{_parameter}
  </delete>
  <!--//    增加用户点赞记录-->
  <!--public boolean addZanRecord(BlogZan blogZan);-->
  <insert id="addZanRecord" parameterType="BlogZan">
    INSERT INTO blogzan(blog_id,user_id,zan_time)VALUES(#{blogId},#{userId},#{zanTime})
  </insert>
  <!--//    根据用户id查询用户是否对该博客有点赞记录-->
  <!--public List<BlogZan> selectZanRecordByUserId(int blog_id,int user_id);-->
  <select id="selectZanRecordByUserId"  resultType="BlogZan" parameterType="BlogZan">
    SELECT * FROM blogzan where blog_id=#{blogId} and user_id=#{userId}
  </select>

  <!--public List<shuDongDetail> selectAllBlogCommentByBlogId(int blog_id);-->
  <select id="selectAllBlogCommentByBlogId" parameterType="int" resultType="shuDongDetail">
    SELECT bc.blog_id,bc.blogContent,bc.blogCreateTime,userinfo.user_id,userinfo.userAccount,userinfo.userNickName,
    case when blogcomment.comment_id is null then 0 else blogcomment.comment_id end as comment_id,
    case when blogcomment.commentTime is null then 0 else blogcomment.commentTime end as commentTime,
    case when blogcomment.commentContent is null then 0 else blogcomment.commentContent end as commentContent
    FROM blogContent bc
    LEFT JOIN (SELECT commentContent,comment_id,commentTime,commentUser_id,blog_id FROM blogcomment ) blogcomment ON blogcomment.blog_id=bc.blog_id
    LEFT JOIN userinfo ON blogcomment.commentUser_id = userinfo.user_id
    WHERE bc.blog_id=#{_parameter}
    order by commentTime desc
  </select>
  <!--//    根据一级评论的comment_id获得评论的评论 二级评论-->
  <!--public List<ReplyCommentDetail> selectAllReplyComment(int comment_id);-->
  <select id="selectAllReplyComment" parameterType="int" resultType="ReplyCommentDetail">
    SELECT r.replycomment_id,bc.commentUser_id,u.user_id,u.userAccount,u.userNickName,r.replycommentcontent,r.replycommenttime
    FROM replycomment r,blogcomment bc,userinfo u
    WHERE r.comment_id=bc.comment_id AND u.user_id=r.user_id  AND r.comment_id=#{_parameter}
  </select>
  <!--//    插入一级博客评论内容-->
  <!--public boolean insertBlogComment(BlogComment blogComment);-->
  <insert id="insertBlogComment" parameterType="BlogComment" useGeneratedKeys="true" keyProperty="commentId">
    INSERT  into blogcomment  VALUES (#{commentId},#{blogId},#{commentuserId},#{commentcontent},#{commenttime})
  </insert>
  <!--//    从二级评论中得到所有的replyComment_id，进而查出所有三级及以下评论-->
  <!-- public List<ReplyCommentDetail> selectAllThirdReplyComment(int replyComment_id);-->
  <select id="selectAllThirdReplyComment" resultType="ReplyCommentDetail">
    SELECT DISTINCT rr.replycomment_id,rb.user_id commentUser_id,rr.user_id,u.userAccount,u.userNickName,rr.replycommentcontent,rr.replycommenttime
    from replycomment rr,replycomment rb,userinfo u,blogcomment bc
    WHERE rr.replycomment=#{_parameter}
    AND u.user_id=rr.user_id
    AND rr.replycomment is not null
    AND rr.replycomment = rb.replycomment_id
  </select>
  <!--//    插入二级评论内容-->
  <!--public boolean insertReplyComment(ReplyComment replyComment);-->
  <insert id="insertReplyComment" parameterType="ReplyComment" useGeneratedKeys="true" keyProperty="replycommentId">
    INSERT INTO replycomment
    VALUES(#{replycommentId},null,#{commentId},#{userId},#{replycommentcontent},#{replycommenttime})
  </insert>

  <!--//    插入三级评论内容-->
  <!--public boolean insertThirdReplyComment(ReplyComment replyComment);-->
  <insert id="insertThirdReplyComment" parameterType="ReplyComment">
    INSERT INTO replycomment
    VALUES(#{replycommentId},#{replycomment},NULL,#{userId},#{replycommentcontent},#{replycommenttime})
  </insert>

  <!--//    三级评论：根据comment_id 查出 replycomment_id-->
  <!--public int selectUserIdByCommentId(int comment_id);-->
  <select id="selectUserIdByCommentId" parameterType="int" resultType="int">
    SELECT replycomment_id FROM blogcomment
    WHERE comment_id = #{_parameter}
  </select>

  <!--public List<BlogUserPicsLabel> selectAllBlogByUserId(int user_id);-->
  <select id="selectAllBlogByUserId" resultMap="selectBlogUserLabelMap" parameterType="int">
    select blogcontent.*,userinfo.*,blogpics.*,bloglabel.*,labelinfo.*,
    case when a.zan is null then 0 else a.zan end as zan,
    case when b.pinglun is null then 0 else b.pinglun end as pinglun,
    case when c.liulan is null then 0 else c.liulan end as liulan
    from userinfo
    left join blogcontent ON blogcontent.user_id=userinfo.user_id
    left join blogpics ON blogcontent.blogPics_id=blogpics.blogPics_id
    left join bloglabel ON blogcontent.blog_id=bloglabel.blog_id
    left join labelinfo ON bloglabel.label_id=labelinfo.label_id
    left join (select blog_id,count(blog_id) as zan from blogzan group by blog_id) a on (a.blog_id=blogcontent.blog_id)
    left join (select blog_id,count(blog_id) as pinglun from blogcomment group by blog_id) b on (b.blog_id=blogcontent.blog_id)
    left join (select blog_id,blogBrowseCount as liulan from blogbrowse group by blog_id) c on (c.blog_id=blogcontent.blog_id)

    where userinfo.user_id=#{_parameter}
    order by blogcontent.blogcreatetime desc
  </select>
  <!--public List<BlogUserPicsLabel> selectCountBlogByUserId(int user_id,int count);-->
  <select id="selectCountBlogByUserId" resultMap="selectBlogUserLabelMap" parameterType="int">
    select blogcontent.*,userinfo.*,blogpics.*,bloglabel.*,labelinfo.*,
    case when a.zan is null then 0 else a.zan end as zan,
    case when b.pinglun is null then 0 else b.pinglun end as pinglun,
    case when c.liulan is null then 0 else c.liulan end as liulan
    from blogcontent
    left join userinfo ON blogcontent.user_id=userinfo.user_id
    left join blogpics ON blogcontent.blogPics_id=blogpics.blogPics_id
    left join bloglabel ON blogcontent.blog_id=bloglabel.blog_id
    left join labelinfo ON bloglabel.label_id=labelinfo.label_id
    left join (select blog_id,count(blog_id) as zan from blogzan group by blog_id) a on (a.blog_id=blogcontent.blog_id)
    left join (select blog_id,count(blog_id) as pinglun from blogcomment group by blog_id) b on (b.blog_id=blogcontent.blog_id)
    left join (select blog_id,blogBrowseCount as liulan from blogbrowse group by blog_id) c on (c.blog_id=blogcontent.blog_id)

    where userinfo.user_id=#{param1}
    order by liulan desc
    limit #{param2}
  </select>
  <!--public List<BlogUserPicsLabel> selectBlogZanPinglunByUserId(int user_id);-->
  <select id="selectBlogZanPinglunByUserId" resultMap="selectBlogUserLabelMap" parameterType="int">
    select blogcontent.*,userinfo.*,blogpics.*,bloglabel.*,labelinfo.*,
    case when a.zan is null then 0 else a.zan end as zan,
    case when b.pinglun is null then 0 else b.pinglun end as pinglun,
    case when c.liulan is null then 0 else c.liulan end as liulan
    from userinfo
    left join blogcontent ON blogcontent.user_id=userinfo.user_id
    left join blogpics ON blogcontent.blogPics_id=blogpics.blogPics_id
    left join bloglabel ON blogcontent.blog_id=bloglabel.blog_id
    left join labelinfo ON bloglabel.label_id=labelinfo.label_id
    left join (select blog_id,count(blog_id) as zan  from blogzan  group by blog_id) a on (a.blog_id=blogcontent.blog_id)
    left join (select blog_id,count(blog_id) as pinglun from blogcomment group by blog_id) b on (b.blog_id=blogcontent.blog_id)
    left join (select blog_id,blogBrowseCount as liulan from blogbrowse group by blog_id) c on (c.blog_id=blogcontent.blog_id)
	where blogcontent.blog_id in (select blog_id from blogzan where blogzan.user_id=#{_parameter})
	  or  blogcontent.blog_id in (select blog_id from blogcomment where blogcomment.commentUser_id=#{_parameter})
    order by blogcontent.blogcreatetime desc
  </select>

</mapper>