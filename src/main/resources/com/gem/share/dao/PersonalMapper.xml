<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gem.share.dao.PersonalMapper">

    <resultMap id="selectBlogContentByUserIdMap" type="BlogContent">
        <id column="blog_id" property="blogId"/>
        <result column="user_id" property="userId"/>
        <result column="blogPics_id" property="blogpicsId"/>
        <result column="blogCreateTime" property="blogcreatetime"/>
        <result column="blogFlag" property="blogflag"/>
        <result column="essayFlag" property="essayflag"/>
        <result column="blogContent" property="blogcontent"/>
        <association property="pics" javaType="BlogPics">
            <result column="pic" property="pic"/>
        </association>
    </resultMap>
    <!--//    根据用户id查询该用户的所有博客  按时间倒序排列-->
    <!--public List<BlogContent> selectBlogContentByUserId(int userid);-->
    <select id="selectBlogContentByUserId" parameterType="int" resultMap="selectBlogContentByUserIdMap">
        SELECT bc.*,bp.pic FROM blogcontent bc,blogpics bp
        WHERE bc.blogPics_id = bp.blogPics_id AND user_id=#{_parameter} ORDER BY blogCreateTime
    </select>

    <!--//  通过用户id找到用户点赞过的博客内容，并按时间倒序排列-->
    <!--public List<BlogContent> selectBlogByUserZan(int user_id);-->
    <select id="selectBlogByUserZan" parameterType="int" resultType="BlogContent">
        SELECT * FROM blogcontent WHERE blog_id IN
        (SELECT blog_id FROM blogzan WHERE user_id = #{_parameter} ORDER BY zan_time DESC)
    </select>

    <!--//  通过用户id找到用户点赞过的博客内容的用户信息，并按时间倒序排列-->
    <!--public List<UserInfo> selectUserByUserZan(int user_id);-->
    <select id="selectUserByUserZan" parameterType="int" resultType="UserInfo">
        SELECT * FROM userinfo WHERE user_id IN
        (SELECT user_id FROM blogcontent WHERE blog_id IN
        (SELECT blog_id FROM blogzan WHERE user_id = #{_parameter} ORDER BY zan_time DESC))
    </select>

    <!--//    通过用户id找到用户评论过的博客内容，并按时间倒序排列-->
    <!--public List<BlogContent> selectBlogByUserComment(int user_id);-->
    <select id="selectBlogByUserComment" parameterType="int" resultType="BlogContent">
        SELECT * FROM blogcontent WHERE blog_id IN
        (SELECT blog_id FROM blogcomment WHERE commentUser_id = #{_parameter} ORDER BY commentTime DESC)
    </select>

    <!--//  通过用户id找到用户评论过的博客内容的用户信息，并按时间倒序排列-->
    <!--public List<UserInfo> selectUserByUserComment(int user_id);-->
    <select id="selectUserByUserComment" parameterType="int" resultType="UserInfo">
        SELECT * FROM userinfo WHERE user_id IN
        (SELECT user_id FROM blogcontent WHERE blog_id IN
        (SELECT blog_id FROM blogcomment WHERE commentUser_id = #{_parameter} ORDER BY commentTime DESC))
    </select>

    <!--//    根据用户id查找自己的粉丝-->
    <!--public List<UserInfo> selectFollowUserByUserId(int user_id);-->
    <select id="selectFollowUserByUserId" parameterType="int" resultType="UserInfo">
        SELECT * FROM userinfo WHERE user_id IN
        (SELECT followUser_id FROM followrelation WHERE user_id=#{_parameter})
    </select>

    <!--//    根据用户id、分组名获取该分组的关注人信息-->
    <!--public List<UserInfo> selectFollowUserByUserIdAndGroupId(int user_id,String followGroupName);-->
    <select id="selectFollowUserByUserIdAndGroupId" resultType="UserInfo">
        SELECT * FROM userinfo WHERE user_id IN
        (SELECT user_id FROM followrelation WHERE followUser_id=#{param1} AND followGroup_id =
        (SELECT followGroup_id FROM followgroup WHERE followGroupName = #{param2}))
    </select>

    <!--//    根据用户id查找自己关注的人-->
    <!--public List<UserInfo> selectUserByFollowUserId(int user_id);-->
    <select id="selectUserByFollowUserId" parameterType="int" resultType="UserInfo">
        SELECT * FROM userinfo WHERE user_id IN
        (SELECT user_id FROM followrelation WHERE followUser_id=#{_parameter})
    </select>

    <!--//    根据用户id查询所有的分组-->
    <!--public List<FollowGroup> selectAllGroupByUserId(int user_id);-->
    <select id="selectAllGroupByUserId" parameterType="int" resultType="FollowGroup">
        SELECT * FROM followgroup WHERE followGroup_id IN
        (SELECT followGroup_id FROM followrelation WHERE user_id = #{_parameter})
    </select>

    <resultMap id="UserInfoMap" type="UserInfo">
        <id column="user_id" property="userId"/>
        <result column="userAccount" property="useraccount"/>
        <result column="userSex" property="usersex"/>
        <result column="userAge" property="userage"/>
        <result column="userEducate" property="usereducate"/>
        <result column="userGraduate" property="usergraduate"/>
        <result column="userIntroduce" property="userintroduce"/>
        <result column="userNickName" property="usernickname"/>
        <result column="userImg" property="userimg"/>
        <result column="userEmail" property="useremail"/>
        <result column="userPhone" property="userphone"/>
        <result column="userEnergy" property="userenergy"/>
        <result column="userIdNumber" property="useridnumber"/>
        <result column="userStatus" property="userstatus"/>
        <result column="username" property="username"/>
        <result column="userCreateTime" property="usercreatetime"/>
        <result column="logintime" property="logintime"/>
        <association property="address" javaType="Address">
            <result column="address_id" property="addressId"/>
            <result column="country" property="country"/>
            <result column="province" property="province"/>
            <result column="city" property="city"/>
            <result column="county" property="county"/>
            <result column="detail_address" property="detail_address"/>
        </association>
    </resultMap>

    <!--//    根据用户id查询用户信息-->
    <!--public UserInfo selectUserById(int user_id);-->
    <select id="selectUserById" parameterType="int" resultMap="UserInfoMap">
        select u.*,a.* from userInfo u,address a
        where u.addresss_id = a.address_id AND user_id = #{_paramter}
    </select>


    <!--//    根据自己的id和关注人的id取消关注此人-->
    <!--public boolean deleteUserByUserIdAndFollowUser(int userId,int followUserId);-->
    <delete id="deleteUserByUserIdAndFollowUser">
        delete FROM followrelation WHERE user_id = #{param1} AND followUser_id = #{param2}
    </delete>

    <!--//    添加关注人-->
    <!--public Boolean insertfollow(int user_id,int followUser_id);-->
    <insert id="insertfollow">
        INSERT INTO followrelation(user_id,followUser_id) VALUES(#{user_id},#{followUser_id})
    </insert>
</mapper>