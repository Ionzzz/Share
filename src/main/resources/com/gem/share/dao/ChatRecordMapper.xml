<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gem.share.dao.ChatRecordMapper">
  <resultMap id="BaseResultMap" type="com.gem.share.entity.ChatRecord">
    <id column="message_id" jdbcType="INTEGER" property="messageId" />
    <result column="messagePost" jdbcType="VARCHAR" property="messagepost" />
    <result column="sendTime" jdbcType="TIMESTAMP" property="sendtime" />
    <result column="user_id_Send" jdbcType="INTEGER" property="userIdSend" />
    <result column="user_id_Recv" jdbcType="INTEGER" property="userIdRecv" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    message_id, messagePost, sendTime, user_id_Send, user_id_Recv
  </sql>
  <select id="selectByExample" parameterType="com.gem.share.entity.ChatRecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from chatrecord
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from chatrecord
    where message_id = #{messageId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from chatrecord
    where message_id = #{messageId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.gem.share.entity.ChatRecordExample">
    delete from chatrecord
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.gem.share.entity.ChatRecord">
    insert into chatrecord (message_id, messagePost, sendTime, 
      user_id_Send, user_id_Recv)
    values (#{messageId,jdbcType=INTEGER}, #{messagepost,jdbcType=VARCHAR}, #{sendtime,jdbcType=TIMESTAMP}, 
      #{userIdSend,jdbcType=INTEGER}, #{userIdRecv,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.gem.share.entity.ChatRecord">
    insert into chatrecord
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="messageId != null">
        message_id,
      </if>
      <if test="messagepost != null">
        messagePost,
      </if>
      <if test="sendtime != null">
        sendTime,
      </if>
      <if test="userIdSend != null">
        user_id_Send,
      </if>
      <if test="userIdRecv != null">
        user_id_Recv,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="messageId != null">
        #{messageId,jdbcType=INTEGER},
      </if>
      <if test="messagepost != null">
        #{messagepost,jdbcType=VARCHAR},
      </if>
      <if test="sendtime != null">
        #{sendtime,jdbcType=TIMESTAMP},
      </if>
      <if test="userIdSend != null">
        #{userIdSend,jdbcType=INTEGER},
      </if>
      <if test="userIdRecv != null">
        #{userIdRecv,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.gem.share.entity.ChatRecordExample" resultType="java.lang.Long">
    select count(*) from chatrecord
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update chatrecord
    <set>
      <if test="record.messageId != null">
        message_id = #{record.messageId,jdbcType=INTEGER},
      </if>
      <if test="record.messagepost != null">
        messagePost = #{record.messagepost,jdbcType=VARCHAR},
      </if>
      <if test="record.sendtime != null">
        sendTime = #{record.sendtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.userIdSend != null">
        user_id_Send = #{record.userIdSend,jdbcType=INTEGER},
      </if>
      <if test="record.userIdRecv != null">
        user_id_Recv = #{record.userIdRecv,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update chatrecord
    set message_id = #{record.messageId,jdbcType=INTEGER},
      messagePost = #{record.messagepost,jdbcType=VARCHAR},
      sendTime = #{record.sendtime,jdbcType=TIMESTAMP},
      user_id_Send = #{record.userIdSend,jdbcType=INTEGER},
      user_id_Recv = #{record.userIdRecv,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.gem.share.entity.ChatRecord">
    update chatrecord
    <set>
      <if test="messagepost != null">
        messagePost = #{messagepost,jdbcType=VARCHAR},
      </if>
      <if test="sendtime != null">
        sendTime = #{sendtime,jdbcType=TIMESTAMP},
      </if>
      <if test="userIdSend != null">
        user_id_Send = #{userIdSend,jdbcType=INTEGER},
      </if>
      <if test="userIdRecv != null">
        user_id_Recv = #{userIdRecv,jdbcType=INTEGER},
      </if>
    </set>
    where message_id = #{messageId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.gem.share.entity.ChatRecord">
    update chatrecord
    set messagePost = #{messagepost,jdbcType=VARCHAR},
      sendTime = #{sendtime,jdbcType=TIMESTAMP},
      user_id_Send = #{userIdSend,jdbcType=INTEGER},
      user_id_Recv = #{userIdRecv,jdbcType=INTEGER}
    where message_id = #{messageId,jdbcType=INTEGER}
  </update>

  <!--//    通过发送者id找到消息内容-->
  <!--public String selectMessagePostBySendId(int send_id);-->
  <select id="selectMessagePostBySendId" parameterType="int" resultType="String">
    SELECT MessagePost FROM chatrecord where user_id_Send =#{_parameter}
  </select>

  <!--//  通过接收者id找到消息内容-->
  <!--public String selectMessagePostByRecvId(int recv_id);-->
  <select id="selectMessagePostByRecvId" parameterType="int" resultType="String">
    SELECT MessagePost FROM chatrecord where user_id_Recv =#{_parameter}
  </select>

  <!--//    通过记录id得到消息发送时间-->
  <!--public Date selectMessageTimeByMessageId(int message_ID);-->
  <select id="selectMessageTimeByMessageId" parameterType="int" resultType="Date">
    SELECT SendTime FROM chatrecord where message_id =#{_parameter}
  </select>




</mapper>