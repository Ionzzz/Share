<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gem.share.dao.ShuDongMapper">

  <select id="selectAllShuDongContent" resultType="shuDong">
   select blogcontent.user_id,blogcontent.blog_id,blogcontent.blogContent,blogcontent.blogCreateTime,
case when a.zan is null then 0 else a.zan end as bbrowse,
case when b.pinglun is null then 0 else b.pinglun end as bcCount,
case when c.liulan is null then 0 else c.liulan end as blogBrowseCount
from blogcontent
left join userinfo ON blogcontent.user_id=userinfo.user_id
left join blogpics ON blogcontent.blogPics_id=blogpics.blogPics_id
left join bloglabel ON blogcontent.blog_id=bloglabel.blog_id
left join labelinfo ON bloglabel.label_id=labelinfo.label_id
left join (select blog_id,count(blog_id) as zan from blogzan group by blog_id) a on (a.blog_id=blogcontent.blog_id)
left join (select blog_id,count(blog_id) as pinglun from blogcomment group by blog_id) b on (b.blog_id=blogcontent.blog_id)
left join	(select blog_id,blogBrowseCount as liulan from blogbrowse group by blog_id) c on (c.blog_id=blogcontent.blog_id)
where blogcontent.blogflag=1
  </select>


  <!--//    根据用户id查询用户是否对该博客有点赞记录-->
  <!--public List<BlogZan> selectZanRecordByUserId(int blog_id,int user_id);-->
  <select id="selectZanRecordByUserId"  resultType="BlogZan" parameterType="BlogZan">
    SELECT * FROM blogzan where blog_id=#{blogId} and user_id=#{userId}
  </select>

  <!--//    删除用户点赞记录-->
  <!--public boolean deleteZanRecordByZanId(int zan_id);-->
  <delete id="deleteZanRecordByZanId" parameterType="int">
    delete from blogzan WHERE blogZan_id = #{_parameter}
  </delete>

  <!--//    得到该树洞的点赞数-->
  <!--public int selectCountZan(int blog_id);-->
  <select id="selectCountZan" parameterType="int" resultType="int">
    SELECT COUNT(*) FROM blogzan GROUP BY blog_id HAVING blog_id=#{_parameter}
  </select>

  <!--//    增加用户点赞记录-->
  <!--public boolean addZanRecord(BlogZan blogZan);-->
  <insert id="addZanRecord" parameterType="BlogZan">
    INSERT INTO blogzan(blog_id,user_id,zan_time)VALUES(#{blogId},#{userId},#{zanTime})
  </insert>

  <!--//    获得具体树洞页面内容-->
  <!--public List<shuDongDetail> selectAllShuDongComment(int blog_id);-->
  <select id="selectAllShuDongComment" parameterType="int" resultType="shuDongDetail">
    SELECT bc.blog_id,bc.blogContent,bc.blogCreateTime,userinfo.userAccount,
case when blogcomment.comment_id is null then 0 else blogcomment.comment_id end as comment_id,
case when blogcomment.commentTime is null then 0 else blogcomment.commentTime end as commentTime,
case when blogcomment.commentContent is null then 0 else blogcomment.commentContent end as commentContent
FROM blogContent bc
LEFT JOIN (SELECT commentContent,comment_id,commentTime,commentUser_id,blog_id FROM blogcomment ) blogcomment ON blogcomment.blog_id=bc.blog_id
LEFT JOIN userinfo ON blogcomment.commentUser_id = userinfo.user_id
WHERE blogFlag=1 AND bc.blog_id=#{_parameter}
  </select>

  <!--//    获得树洞页面下一级评论总数-->
  <!--public int selectBcommentCount(int blog_id);-->
  <select id="selectBcommentCount" parameterType="int" resultType="int">
    SELECT COUNT(*) bcommentcount FROM blogcomment WHERE blog_id=#{_parameter}
  </select>

  <!--//    根据一级评论的comment_id获得树洞评论的评论 二级评论-->
  <!--public List<replyCommentDetail> selectAllReplyComment(int comment_id);-->
  <select id="selectAllReplyComment" parameterType="int" resultType="replyCommentDetail">
    SELECT r.replycomment_id,bc.commentUser_id,u.user_id,u.userAccount,r.replycommentcontent,r.replycommenttime
FROM replycomment r,blogcomment bc,userinfo u
WHERE r.comment_id=bc.comment_id AND u.user_id=r.user_id  AND r.comment_id=#{_parameter}
  </select>

  <!--//    插入一级博客评论内容-->
  <!--public boolean insertBlogComment(BlogComment blogComment);-->
  <insert id="insertBlogComment" parameterType="BlogComment" useGeneratedKeys="true" keyProperty="commentId">
  INSERT  into blogcomment  VALUES (#{commentId},#{blogId},#{commentuserId},#{commentcontent},#{commenttime})
  </insert>


  <!--//    从二级评论中得到所有的replyComment_id，进而查出所有三级及以下评论-->
  <!-- public List<replyCommentDetail> selectAllThirdReplyComment(int replyComment_id);-->
  <select id="selectAllThirdReplyComment" resultType="replyCommentDetail">
SELECT DISTINCT rr.replycomment_id,rb.user_id commentUser_id,rr.user_id,u.userAccount,rr.replycommentcontent,rr.replycommenttime
from replycomment rr,replycomment rb,userinfo u,blogcomment bc
WHERE rr.replycomment=#{_parameter}
AND u.user_id=rr.user_id
AND rr.replycomment is not null
AND rr.replycomment = rb.replycomment_id
  </select>

  <!--//    插入二级评论内容-->
  <!--public boolean insertReplyComment(ReplyComment replyComment);-->
  <insert id="insertReplyComment" parameterType="ReplyComment" useGeneratedKeys="true" keyProperty="replycommentId">
    INSERT INTO replycomment
    VALUES(#{replycommentId},null,#{commentId},#{userId},#{replycommentcontent},#{replycommenttime})
  </insert>

  <!--//    插入三级评论内容-->
  <!--public boolean insertThirdReplyComment(ReplyComment replyComment);-->
  <insert id="insertThirdReplyComment" parameterType="ReplyComment">
    INSERT INTO replycomment
    VALUES(#{replycommentId},#{replycomment},NULL,#{userId},#{replycommentcontent},#{replycommenttime})
  </insert>

  <!--//    三级评论：根据comment_id 查出 replycomment_id-->
  <!--public int selectUserIdByCommentId(int comment_id);-->
  <select id="selectUserIdByCommentId" parameterType="int" resultType="int">
    SELECT replycomment_id FROM blogcomment
    WHERE comment_id = #{_parameter}
  </select>

  <!--//    搜索功能-->
  <!--public List<shuDong> searchShuDong(String searchSDContent);-->
  <select id="searchShuDong" parameterType="String" resultType="shuDong">
    select blogcontent.user_id,blogcontent.blog_id,blogcontent.blogContent,blogcontent.blogCreateTime,
case when a.zan is null then 0 else a.zan end as bbrowse,
case when b.pinglun is null then 0 else b.pinglun end as bcCount,
case when c.liulan is null then 0 else c.liulan end as blogBrowseCount
from blogcontent
left join userinfo ON blogcontent.user_id=userinfo.user_id
left join blogpics ON blogcontent.blogPics_id=blogpics.blogPics_id
left join bloglabel ON blogcontent.blog_id=bloglabel.blog_id
left join labelinfo ON bloglabel.label_id=labelinfo.label_id
left join (select blog_id,count(blog_id) as zan from blogzan group by blog_id) a on (a.blog_id=blogcontent.blog_id)
left join (select blog_id,count(blog_id) as pinglun from blogcomment group by blog_id) b on (b.blog_id=blogcontent.blog_id)
left join	(select blog_id,blogBrowseCount as liulan from blogbrowse group by blog_id) c on (c.blog_id=blogcontent.blog_id)
WHERE blogcontent.blogflag=1
AND  blogcontent.blogContent like '%${_parameter}%'
</select>

  <!--//    发布各类博客-->
  <!--public boolean publishAllType(BlogContent blogContent);-->
  <insert id="publishAllType" parameterType="BlogContent" useGeneratedKeys="true" keyProperty="replycommentId">
    INSERT INTO blogcontent
    VALUES(#{blogId},#{userId},#{blogpicsId},#{blogcreatetime},#{blogflag},#{essayflag},#{blogcontent})
  </insert>


</mapper>