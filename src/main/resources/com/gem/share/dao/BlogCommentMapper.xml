<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gem.share.dao.BlogCommentMapper">
  <resultMap id="BaseResultMap" type="com.gem.share.entity.BlogComment">
    <id column="comment_id" jdbcType="INTEGER" property="commentId" />
    <result column="blog_id" jdbcType="INTEGER" property="blogId" />
    <result column="commentUser_id" jdbcType="INTEGER" property="commentuserId" />
    <result column="commentContent" jdbcType="VARCHAR" property="commentcontent" />
    <result column="commentTime" jdbcType="TIMESTAMP" property="commenttime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    comment_id, blog_id, commentUser_id, commentContent, commentTime
  </sql>
  <select id="selectByExample" parameterType="com.gem.share.entity.BlogCommentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from blogcomment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from blogcomment
    where comment_id = #{commentId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from blogcomment
    where comment_id = #{commentId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.gem.share.entity.BlogCommentExample">
    delete from blogcomment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.gem.share.entity.BlogComment">
    insert into blogcomment (comment_id, blog_id, commentUser_id, 
      commentContent, commentTime)
    values (#{commentId,jdbcType=INTEGER}, #{blogId,jdbcType=INTEGER}, #{commentuserId,jdbcType=INTEGER}, 
      #{commentcontent,jdbcType=VARCHAR}, #{commenttime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.gem.share.entity.BlogComment">
    insert into blogcomment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="commentId != null">
        comment_id,
      </if>
      <if test="blogId != null">
        blog_id,
      </if>
      <if test="commentuserId != null">
        commentUser_id,
      </if>
      <if test="commentcontent != null">
        commentContent,
      </if>
      <if test="commenttime != null">
        commentTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="commentId != null">
        #{commentId,jdbcType=INTEGER},
      </if>
      <if test="blogId != null">
        #{blogId,jdbcType=INTEGER},
      </if>
      <if test="commentuserId != null">
        #{commentuserId,jdbcType=INTEGER},
      </if>
      <if test="commentcontent != null">
        #{commentcontent,jdbcType=VARCHAR},
      </if>
      <if test="commenttime != null">
        #{commenttime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.gem.share.entity.BlogCommentExample" resultType="java.lang.Long">
    select count(*) from blogcomment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update blogcomment
    <set>
      <if test="record.commentId != null">
        comment_id = #{record.commentId,jdbcType=INTEGER},
      </if>
      <if test="record.blogId != null">
        blog_id = #{record.blogId,jdbcType=INTEGER},
      </if>
      <if test="record.commentuserId != null">
        commentUser_id = #{record.commentuserId,jdbcType=INTEGER},
      </if>
      <if test="record.commentcontent != null">
        commentContent = #{record.commentcontent,jdbcType=VARCHAR},
      </if>
      <if test="record.commenttime != null">
        commentTime = #{record.commenttime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update blogcomment
    set comment_id = #{record.commentId,jdbcType=INTEGER},
      blog_id = #{record.blogId,jdbcType=INTEGER},
      commentUser_id = #{record.commentuserId,jdbcType=INTEGER},
      commentContent = #{record.commentcontent,jdbcType=VARCHAR},
      commentTime = #{record.commenttime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.gem.share.entity.BlogComment">
    update blogcomment
    <set>
      <if test="blogId != null">
        blog_id = #{blogId,jdbcType=INTEGER},
      </if>
      <if test="commentuserId != null">
        commentUser_id = #{commentuserId,jdbcType=INTEGER},
      </if>
      <if test="commentcontent != null">
        commentContent = #{commentcontent,jdbcType=VARCHAR},
      </if>
      <if test="commenttime != null">
        commentTime = #{commenttime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where comment_id = #{commentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.gem.share.entity.BlogComment">
    update blogcomment
    set blog_id = #{blogId,jdbcType=INTEGER},
      commentUser_id = #{commentuserId,jdbcType=INTEGER},
      commentContent = #{commentcontent,jdbcType=VARCHAR},
      commentTime = #{commenttime,jdbcType=TIMESTAMP}
    where comment_id = #{commentId,jdbcType=INTEGER}
  </update>

  <!--//    通过博客id找到评论内容-->
  <!--public String selectCommentContentByBlogId(int blog_id);-->
  <select id="selectCommentContentByBlogId" parameterType="int" resultType="String">
    SELECT commentContent from blogcomment where blog_id =#{_parameter}
  </select>


  <!--//    通过博客id找到评论用户id-->
  <!--public Integer selectBlogCommentUserByBlogId(int blog_id);-->
  <select id="selectBlogCommentUserByBlogId" parameterType="int" resultType="Integer">
    SELECT commentUser_id FROM blogcomment where blog_id =#{_parameter}
  </select>


  <!--//    通过博客id找到评论内容的时间-->
  <!--public Date selectCommentTimeByBlogId(int blog_id);-->
  <select id="selectCommentTimeByBlogId" parameterType="int" resultType="Date">
    SELECT commentTime from blogcomment where blog_id =#{_parameter}
  </select>



</mapper>